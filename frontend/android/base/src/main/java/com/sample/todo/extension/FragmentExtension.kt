package com.sample.todo.extension

import androidx.fragment.app.Fragment
import androidx.lifecycle.LiveData
import com.sample.todo.base.entity.Event
import com.sample.todo.base.extension.observeEvent
import com.sample.todo.base.message.Message
import com.sample.todo.base.widget.FadingSnackbar
import com.sample.todo.domain.repository.MessageManager
import timber.log.Timber

fun Fragment.setUpSnackbar(
    snackbarMessage: LiveData<Event<Message>>,
    fadingSnackbar: FadingSnackbar,
    messageManager: MessageManager,
    actionClickListener: () -> Unit = {}
) {
    // Show messages generated by the ViewModel
    snackbarMessage.observeEvent(viewLifecycleOwner) { message ->
        Timber.d("Message $message observed by ${this::class.java.name}}")
        fadingSnackbar.show(
            messageId = message.messageId,
            actionId = message.actionId,
            longDuration = message.longDuration,
            actionClick = {
                actionClickListener()
                fadingSnackbar.dismiss()
            }
        )
    }
    // Important reservations messages are handled with a message manager
    messageManager.observeNextMessage().observeEvent(viewLifecycleOwner) { message ->
        Timber.d("Message $message observed by ${this::class.java.name}}")
        val messageText = requireContext().getString(message.messageId)
        fadingSnackbar.show(
            messageText = messageText,
            actionId = message.actionId,
            longDuration = message.longDuration,
            actionClick = {
                actionClickListener()
                fadingSnackbar.dismiss()
            },
            // When the snackbar is dismissed, ping the snackbar message manager in case there
            // are pending messages.
            dismissListener = { messageManager.loadNextMessage() }
        )
    }
}
